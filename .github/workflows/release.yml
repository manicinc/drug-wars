name: Create Version and Release App

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest tags
        run: git fetch --tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Configure Git User
        run: |
          git config user.name "GitHub Action Bot"
          git config user.email "action-bot@github.com"

      - name: Bump version and create changelog
        run: npx standard-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes and tag
        run: git push --follow-tags origin HEAD:${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from package.json
        id: get_version
        run: echo "version=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_publish:
    needs: release
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out tagged release
        uses: actions/checkout@v4
        with:
          ref: refs/tags/v${{ needs.release.outputs.version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Clear npm cache (Linux only)
        if: runner.os == 'Linux'
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Debug and rebuild native modules (Linux only)
        if: runner.os == 'Linux'
        run: |
          echo "Checking app-builder permissions and existence:"
          ls -la node_modules/app-builder-bin/linux/x64/ || echo "x64 directory not found"
          ls -la node_modules/app-builder-bin/linux/arm64/ || echo "arm64 directory not found"
          
          # Force rebuild native modules
          npm rebuild
          
          # Ensure all binaries are executable
          find node_modules -name "*.node" -exec chmod +x {} \; || true
          find node_modules -type f -executable -exec chmod +x {} \; || true

      - name: Build and Publish Electron Application
        run: npm run release:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
